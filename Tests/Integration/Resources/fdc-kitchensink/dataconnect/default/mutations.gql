# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

mutation createTestId($id: UUID!) @auth(level: PUBLIC) {
    testId_insert(data: {
        id: $id
    })
}

mutation createTestAutoId @auth(level: PUBLIC) {
    testAutoId_insert(data: {})
}

mutation createStandardScalar($id: UUID!, $number: Int!, $text: String!, $decimal: Float!) @auth(level: PUBLIC) {
    standardScalars_insert(data: {
        id: $id,
        number: $number,
        text: $text,
        decimal: $decimal
    })
}

mutation createScalarBoundary($id: UUID!, $maxNumber: Int!, $minNumber: Int!, $maxDecimal: Float!, $minDecimal: Float!) @auth(level: PUBLIC) {
    scalarBoundary_insert(data: {
        id: $id,
        maxNumber: $maxNumber,
        minNumber: $minNumber,
        maxDecimal: $maxDecimal,
        minDecimal: $minDecimal
    })
}

mutation createLargeNum($id: UUID!, $num: Int64!, $maxNum: Int64!, $minNum: Int64!) @auth(level: PUBLIC) {
    largeIntType_insert(data: {
        id: $id,
        num: $num,
        maxNum: $maxNum,
        minNum: $minNum
    })
}

mutation createLocalDate($id: UUID!, $localDate: Date!) @auth(level: PUBLIC) {
    localDateType_insert(data: {
        id: $id
        localDate: $localDate
    })
}

mutation createAnyValueType($id: UUID!, $props: Any!) @auth(level: PUBLIC) {
    anyValueType_insert(data: {
        id: $id
        props: $props
    })
}

# Notice how both "inserts" use the same ID; this means that one of them
# will necessarily fail because you can't have two rows with the same ID.
mutation InsertMultiplePeople($id: UUID!, $name1: String!, $name2: String!) {
  person1: person_insert(data: { id: $id, name: $name1 })
  person2: person_insert(data: { id: $id, name: $name2 })
}

