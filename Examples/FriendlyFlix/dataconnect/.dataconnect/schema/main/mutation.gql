extend type Mutation {
  """
  Insert a single Actor into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  actor_insert(data: Actor_Data!): Actor_Key! @fdc_generated(from: "Actor", purpose: INSERT_SINGLE)
  """
  Insert a single FavoriteActor into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  favorite_actor_insert(data: FavoriteActor_Data!): FavoriteActor_Key! @fdc_generated(from: "FavoriteActor", purpose: INSERT_SINGLE)
  """
  Insert a single FavoriteMovie into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  favorite_movie_insert(data: FavoriteMovie_Data!): FavoriteMovie_Key! @fdc_generated(from: "FavoriteMovie", purpose: INSERT_SINGLE)
  """
  Insert a single Movie into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movie_insert(data: Movie_Data!): Movie_Key! @fdc_generated(from: "Movie", purpose: INSERT_SINGLE)
  """
  Insert a single MovieActor into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieActor_insert(data: MovieActor_Data!): MovieActor_Key! @fdc_generated(from: "MovieActor", purpose: INSERT_SINGLE)
  """
  Insert a single MovieMetadata into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieMetadata_insert(data: MovieMetadata_Data!): MovieMetadata_Key! @fdc_generated(from: "MovieMetadata", purpose: INSERT_SINGLE)
  """
  Insert a single Review into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insert(data: Review_Data!): Review_Key! @fdc_generated(from: "Review", purpose: INSERT_SINGLE)
  """
  Insert a single User into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(data: User_Data!): User_Key! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  Insert Actor entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  actor_insertMany(data: [Actor_Data!]!): [Actor_Key!]! @fdc_generated(from: "Actor", purpose: INSERT_MULTIPLE)
  """
  Insert FavoriteActor entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  favorite_actor_insertMany(data: [FavoriteActor_Data!]!): [FavoriteActor_Key!]! @fdc_generated(from: "FavoriteActor", purpose: INSERT_MULTIPLE)
  """
  Insert FavoriteMovie entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  favorite_movie_insertMany(data: [FavoriteMovie_Data!]!): [FavoriteMovie_Key!]! @fdc_generated(from: "FavoriteMovie", purpose: INSERT_MULTIPLE)
  """
  Insert Movie entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movie_insertMany(data: [Movie_Data!]!): [Movie_Key!]! @fdc_generated(from: "Movie", purpose: INSERT_MULTIPLE)
  """
  Insert MovieActor entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieActor_insertMany(data: [MovieActor_Data!]!): [MovieActor_Key!]! @fdc_generated(from: "MovieActor", purpose: INSERT_MULTIPLE)
  """
  Insert MovieMetadata entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieMetadata_insertMany(data: [MovieMetadata_Data!]!): [MovieMetadata_Key!]! @fdc_generated(from: "MovieMetadata", purpose: INSERT_MULTIPLE)
  """
  Insert Review entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insertMany(data: [Review_Data!]!): [Review_Key!]! @fdc_generated(from: "Review", purpose: INSERT_MULTIPLE)
  """
  Insert User entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(data: [User_Data!]!): [User_Key!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  Insert or update a single Actor into the table, based on the primary key. Returns the key of the newly inserted Actor.
  """
  actor_upsert(data: Actor_Data!): Actor_Key! @fdc_generated(from: "Actor", purpose: UPSERT_SINGLE)
  """
  Insert or update a single FavoriteActor into the table, based on the primary key. Returns the key of the newly inserted FavoriteActor.
  """
  favorite_actor_upsert(data: FavoriteActor_Data!): FavoriteActor_Key! @fdc_generated(from: "FavoriteActor", purpose: UPSERT_SINGLE)
  """
  Insert or update a single FavoriteMovie into the table, based on the primary key. Returns the key of the newly inserted FavoriteMovie.
  """
  favorite_movie_upsert(data: FavoriteMovie_Data!): FavoriteMovie_Key! @fdc_generated(from: "FavoriteMovie", purpose: UPSERT_SINGLE)
  """
  Insert or update a single Movie into the table, based on the primary key. Returns the key of the newly inserted Movie.
  """
  movie_upsert(data: Movie_Data!): Movie_Key! @fdc_generated(from: "Movie", purpose: UPSERT_SINGLE)
  """
  Insert or update a single MovieActor into the table, based on the primary key. Returns the key of the newly inserted MovieActor.
  """
  movieActor_upsert(data: MovieActor_Data!): MovieActor_Key! @fdc_generated(from: "MovieActor", purpose: UPSERT_SINGLE)
  """
  Insert or update a single MovieMetadata into the table, based on the primary key. Returns the key of the newly inserted MovieMetadata.
  """
  movieMetadata_upsert(data: MovieMetadata_Data!): MovieMetadata_Key! @fdc_generated(from: "MovieMetadata", purpose: UPSERT_SINGLE)
  """
  Insert or update a single Review into the table, based on the primary key. Returns the key of the newly inserted Review.
  """
  review_upsert(data: Review_Data!): Review_Key! @fdc_generated(from: "Review", purpose: UPSERT_SINGLE)
  """
  Insert or update a single User into the table, based on the primary key. Returns the key of the newly inserted User.
  """
  user_upsert(data: User_Data!): User_Key! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  Insert or update Actor entries into the table, based on the primary key. Returns the key of the newly inserted Actor.
  """
  actor_upsertMany(data: [Actor_Data!]): [Actor_Key!]! @fdc_generated(from: "Actor", purpose: UPSERT_MULTIPLE)
  """
  Insert or update FavoriteActor entries into the table, based on the primary key. Returns the key of the newly inserted FavoriteActor.
  """
  favorite_actor_upsertMany(data: [FavoriteActor_Data!]): [FavoriteActor_Key!]! @fdc_generated(from: "FavoriteActor", purpose: UPSERT_MULTIPLE)
  """
  Insert or update FavoriteMovie entries into the table, based on the primary key. Returns the key of the newly inserted FavoriteMovie.
  """
  favorite_movie_upsertMany(data: [FavoriteMovie_Data!]): [FavoriteMovie_Key!]! @fdc_generated(from: "FavoriteMovie", purpose: UPSERT_MULTIPLE)
  """
  Insert or update Movie entries into the table, based on the primary key. Returns the key of the newly inserted Movie.
  """
  movie_upsertMany(data: [Movie_Data!]): [Movie_Key!]! @fdc_generated(from: "Movie", purpose: UPSERT_MULTIPLE)
  """
  Insert or update MovieActor entries into the table, based on the primary key. Returns the key of the newly inserted MovieActor.
  """
  movieActor_upsertMany(data: [MovieActor_Data!]): [MovieActor_Key!]! @fdc_generated(from: "MovieActor", purpose: UPSERT_MULTIPLE)
  """
  Insert or update MovieMetadata entries into the table, based on the primary key. Returns the key of the newly inserted MovieMetadata.
  """
  movieMetadata_upsertMany(data: [MovieMetadata_Data!]): [MovieMetadata_Key!]! @fdc_generated(from: "MovieMetadata", purpose: UPSERT_MULTIPLE)
  """
  Insert or update Review entries into the table, based on the primary key. Returns the key of the newly inserted Review.
  """
  review_upsertMany(data: [Review_Data!]): [Review_Key!]! @fdc_generated(from: "Review", purpose: UPSERT_MULTIPLE)
  """
  Insert or update User entries into the table, based on the primary key. Returns the key of the newly inserted User.
  """
  user_upsertMany(data: [User_Data!]): [User_Key!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  Update a single Actor based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  actor_update(id: UUID, key: Actor_Key, data: Actor_Data!): Actor_Key @fdc_generated(from: "Actor", purpose: UPDATE_SINGLE)
  """
  Update a single FavoriteActor based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  favorite_actor_update(key: FavoriteActor_Key, data: FavoriteActor_Data!): FavoriteActor_Key @fdc_generated(from: "FavoriteActor", purpose: UPDATE_SINGLE)
  """
  Update a single FavoriteMovie based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  favorite_movie_update(key: FavoriteMovie_Key, data: FavoriteMovie_Data!): FavoriteMovie_Key @fdc_generated(from: "FavoriteMovie", purpose: UPDATE_SINGLE)
  """
  Update a single Movie based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  movie_update(id: UUID, key: Movie_Key, data: Movie_Data!): Movie_Key @fdc_generated(from: "Movie", purpose: UPDATE_SINGLE)
  """
  Update a single MovieActor based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  movieActor_update(key: MovieActor_Key, data: MovieActor_Data!): MovieActor_Key @fdc_generated(from: "MovieActor", purpose: UPDATE_SINGLE)
  """
  Update a single MovieMetadata based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  movieMetadata_update(id: UUID, key: MovieMetadata_Key, data: MovieMetadata_Data!): MovieMetadata_Key @fdc_generated(from: "MovieMetadata", purpose: UPDATE_SINGLE)
  """
  Update a single Review based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  review_update(key: Review_Key, data: Review_Data!): Review_Key @fdc_generated(from: "Review", purpose: UPDATE_SINGLE)
  """
  Update a single User based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(id: String, id_expr: String_Expr, key: User_Key, data: User_Data!): User_Key @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  Update Actor entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  actor_updateMany(where: Actor_Filter, all: Boolean = false, data: Actor_Data!): Int! @fdc_generated(from: "Actor", purpose: UPDATE_MULTIPLE)
  """
  Update FavoriteActor entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  favorite_actor_updateMany(where: FavoriteActor_Filter, all: Boolean = false, data: FavoriteActor_Data!): Int! @fdc_generated(from: "FavoriteActor", purpose: UPDATE_MULTIPLE)
  """
  Update FavoriteMovie entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  favorite_movie_updateMany(where: FavoriteMovie_Filter, all: Boolean = false, data: FavoriteMovie_Data!): Int! @fdc_generated(from: "FavoriteMovie", purpose: UPDATE_MULTIPLE)
  """
  Update Movie entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  movie_updateMany(where: Movie_Filter, all: Boolean = false, data: Movie_Data!): Int! @fdc_generated(from: "Movie", purpose: UPDATE_MULTIPLE)
  """
  Update MovieActor entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  movieActor_updateMany(where: MovieActor_Filter, all: Boolean = false, data: MovieActor_Data!): Int! @fdc_generated(from: "MovieActor", purpose: UPDATE_MULTIPLE)
  """
  Update MovieMetadata entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  movieMetadata_updateMany(where: MovieMetadata_Filter, all: Boolean = false, data: MovieMetadata_Data!): Int! @fdc_generated(from: "MovieMetadata", purpose: UPDATE_MULTIPLE)
  """
  Update Review entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  review_updateMany(where: Review_Filter, all: Boolean = false, data: Review_Data!): Int! @fdc_generated(from: "Review", purpose: UPDATE_MULTIPLE)
  """
  Update User entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(where: User_Filter, all: Boolean = false, data: User_Data!): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  Delete a single Actor based on `id` or `key` and return its key (or `null` if not found).
  """
  actor_delete(id: UUID, key: Actor_Key): Actor_Key @fdc_generated(from: "Actor", purpose: DELETE_SINGLE)
  """
  Delete a single FavoriteActor based on `id` or `key` and return its key (or `null` if not found).
  """
  favorite_actor_delete(key: FavoriteActor_Key): FavoriteActor_Key @fdc_generated(from: "FavoriteActor", purpose: DELETE_SINGLE)
  """
  Delete a single FavoriteMovie based on `id` or `key` and return its key (or `null` if not found).
  """
  favorite_movie_delete(key: FavoriteMovie_Key): FavoriteMovie_Key @fdc_generated(from: "FavoriteMovie", purpose: DELETE_SINGLE)
  """
  Delete a single Movie based on `id` or `key` and return its key (or `null` if not found).
  """
  movie_delete(id: UUID, key: Movie_Key): Movie_Key @fdc_generated(from: "Movie", purpose: DELETE_SINGLE)
  """
  Delete a single MovieActor based on `id` or `key` and return its key (or `null` if not found).
  """
  movieActor_delete(key: MovieActor_Key): MovieActor_Key @fdc_generated(from: "MovieActor", purpose: DELETE_SINGLE)
  """
  Delete a single MovieMetadata based on `id` or `key` and return its key (or `null` if not found).
  """
  movieMetadata_delete(id: UUID, key: MovieMetadata_Key): MovieMetadata_Key @fdc_generated(from: "MovieMetadata", purpose: DELETE_SINGLE)
  """
  Delete a single Review based on `id` or `key` and return its key (or `null` if not found).
  """
  review_delete(key: Review_Key): Review_Key @fdc_generated(from: "Review", purpose: DELETE_SINGLE)
  """
  Delete a single User based on `id` or `key` and return its key (or `null` if not found).
  """
  user_delete(id: String, id_expr: String_Expr, key: User_Key): User_Key @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  Delete Actor entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  actor_deleteMany(where: Actor_Filter, all: Boolean = false): Int! @fdc_generated(from: "Actor", purpose: DELETE_MULTIPLE)
  """
  Delete FavoriteActor entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  favorite_actor_deleteMany(where: FavoriteActor_Filter, all: Boolean = false): Int! @fdc_generated(from: "FavoriteActor", purpose: DELETE_MULTIPLE)
  """
  Delete FavoriteMovie entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  favorite_movie_deleteMany(where: FavoriteMovie_Filter, all: Boolean = false): Int! @fdc_generated(from: "FavoriteMovie", purpose: DELETE_MULTIPLE)
  """
  Delete Movie entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  movie_deleteMany(where: Movie_Filter, all: Boolean = false): Int! @fdc_generated(from: "Movie", purpose: DELETE_MULTIPLE)
  """
  Delete MovieActor entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  movieActor_deleteMany(where: MovieActor_Filter, all: Boolean = false): Int! @fdc_generated(from: "MovieActor", purpose: DELETE_MULTIPLE)
  """
  Delete MovieMetadata entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  movieMetadata_deleteMany(where: MovieMetadata_Filter, all: Boolean = false): Int! @fdc_generated(from: "MovieMetadata", purpose: DELETE_MULTIPLE)
  """
  Delete Review entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  review_deleteMany(where: Review_Filter, all: Boolean = false): Int! @fdc_generated(from: "Review", purpose: DELETE_MULTIPLE)
  """
  Delete User entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(where: User_Filter, all: Boolean = false): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
