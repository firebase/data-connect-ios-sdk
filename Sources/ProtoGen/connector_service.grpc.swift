//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: connector_service.proto
//

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Google_Firebase_Dataconnect_V1beta_ConnectorServiceClient`, then call
/// methods of this protocol to make API calls.
public protocol Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol? {
    get
  }

  func executeQuery(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
                    callOptions: CallOptions?)
    -> UnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse>

  func executeMutation(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
                       callOptions: CallOptions?)
    -> UnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse>
}

public extension Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientProtocol {
  var serviceName: String {
    return "google.firebase.dataconnect.v1beta.ConnectorService"
  }

  /// Execute a predefined query in a Connector.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExecuteQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  func executeQuery(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
                    callOptions: CallOptions? = nil)
    -> UnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse> {
    return makeUnaryCall(
      path: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods.executeQuery
        .path,
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeExecuteQueryInterceptors() ?? []
    )
  }

  /// Execute a predefined mutation in a Connector.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExecuteMutation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  func executeMutation(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
                       callOptions: CallOptions? = nil)
    -> UnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse> {
    return makeUnaryCall(
      path: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods
        .executeMutation.path,
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeExecuteMutationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Google_Firebase_Dataconnect_V1beta_ConnectorServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Google_Firebase_Dataconnect_V1beta_ConnectorServiceNIOClient")
public final class Google_Firebase_Dataconnect_V1beta_ConnectorServiceClient: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { lock.withLock { self._defaultCallOptions } }
    set { lock.withLockVoid { self._defaultCallOptions = newValue } }
  }

  public var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol? {
    get { lock.withLock { self._interceptors } }
    set { lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.firebase.dataconnect.v1beta.ConnectorService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(channel: GRPCChannel,
              defaultCallOptions: CallOptions = CallOptions(),
              interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol? =
                nil) {
    self.channel = channel
    _defaultCallOptions = defaultCallOptions
    _interceptors = interceptors
  }
}

public struct Google_Firebase_Dataconnect_V1beta_ConnectorServiceNIOClient: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the google.firebase.dataconnect.v1beta.ConnectorService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(channel: GRPCChannel,
              defaultCallOptions: CallOptions = CallOptions(),
              interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol? =
                nil) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firebase_Dataconnect_V1beta_ConnectorServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol? {
    get
  }

  func makeExecuteQueryCall(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
                            callOptions: CallOptions?)
    -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse>

  func makeExecuteMutationCall(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
                               callOptions: CallOptions?)
    -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Google_Firebase_Dataconnect_V1beta_ConnectorServiceAsyncClientProtocol {
  static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.serviceDescriptor
  }

  var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  func makeExecuteQueryCall(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
                            callOptions: CallOptions? = nil)
    -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse> {
    return makeAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods.executeQuery
        .path,
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeExecuteQueryInterceptors() ?? []
    )
  }

  func makeExecuteMutationCall(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
                               callOptions: CallOptions? = nil)
    -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
      Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse> {
    return makeAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods
        .executeMutation.path,
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeExecuteMutationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Google_Firebase_Dataconnect_V1beta_ConnectorServiceAsyncClientProtocol {
  func executeQuery(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
                    callOptions: CallOptions? = nil) async throws
    -> Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse {
    return try await performAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods.executeQuery
        .path,
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeExecuteQueryInterceptors() ?? []
    )
  }

  func executeMutation(_ request: Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
                       callOptions: CallOptions? = nil) async throws
    -> Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse {
    return try await performAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods
        .executeMutation.path,
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeExecuteMutationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Google_Firebase_Dataconnect_V1beta_ConnectorServiceAsyncClient: Google_Firebase_Dataconnect_V1beta_ConnectorServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol?

  public init(channel: GRPCChannel,
              defaultCallOptions: CallOptions = CallOptions(),
              interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol? =
                nil) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientInterceptorFactoryProtocol: Sendable {
  /// - Returns: Interceptors to use when invoking 'executeQuery'.
  func makeExecuteQueryInterceptors() -> [ClientInterceptor<
    Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
    Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse
  >]

  /// - Returns: Interceptors to use when invoking 'executeMutation'.
  func makeExecuteMutationInterceptors() -> [ClientInterceptor<
    Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
    Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse
  >]
}

public enum Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ConnectorService",
    fullName: "google.firebase.dataconnect.v1beta.ConnectorService",
    methods: [
      Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods.executeQuery,
      Google_Firebase_Dataconnect_V1beta_ConnectorServiceClientMetadata.Methods.executeMutation,
    ]
  )

  public enum Methods {
    public static let executeQuery = GRPCMethodDescriptor(
      name: "ExecuteQuery",
      path: "/google.firebase.dataconnect.v1beta.ConnectorService/ExecuteQuery",
      type: GRPCCallType.unary
    )

    public static let executeMutation = GRPCMethodDescriptor(
      name: "ExecuteMutation",
      path: "/google.firebase.dataconnect.v1beta.ConnectorService/ExecuteMutation",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Firebase_Dataconnect_V1beta_ConnectorServiceProvider: CallHandlerProvider {
  var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerInterceptorFactoryProtocol? {
    get
  }

  /// Execute a predefined query in a Connector.
  func executeQuery(request: Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
                    context: StatusOnlyCallContext)
    -> EventLoopFuture<Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse>

  /// Execute a predefined mutation in a Connector.
  func executeMutation(request: Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
                       context: StatusOnlyCallContext)
    -> EventLoopFuture<Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse>
}

public extension Google_Firebase_Dataconnect_V1beta_ConnectorServiceProvider {
  var serviceName: Substring {
    return Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerMetadata.serviceDescriptor
      .fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's
  /// method.
  /// Returns nil for methods not handled by this service.
  func handle(method name: Substring,
              context: CallHandlerContext) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ExecuteQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest
        >(),
        responseSerializer: ProtobufSerializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse
        >(),
        interceptors: interceptors?.makeExecuteQueryInterceptors() ?? [],
        userFunction: executeQuery(request:context:)
      )

    case "ExecuteMutation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest
        >(),
        responseSerializer: ProtobufSerializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse
        >(),
        interceptors: interceptors?.makeExecuteMutationInterceptors() ?? [],
        userFunction: executeMutation(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firebase_Dataconnect_V1beta_ConnectorServiceAsyncProvider: CallHandlerProvider,
  Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerInterceptorFactoryProtocol? {
    get
  }

  /// Execute a predefined query in a Connector.
  func executeQuery(request: Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
                    context: GRPCAsyncServerCallContext) async throws
    -> Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse

  /// Execute a predefined mutation in a Connector.
  func executeMutation(request: Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
                       context: GRPCAsyncServerCallContext) async throws
    -> Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Google_Firebase_Dataconnect_V1beta_ConnectorServiceAsyncProvider {
  static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerMetadata.serviceDescriptor
  }

  var serviceName: Substring {
    return Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerMetadata.serviceDescriptor
      .fullName[...]
  }

  var interceptors: Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  func handle(method name: Substring,
              context: CallHandlerContext) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ExecuteQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest
        >(),
        responseSerializer: ProtobufSerializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse
        >(),
        interceptors: interceptors?.makeExecuteQueryInterceptors() ?? [],
        wrapping: { try await self.executeQuery(request: $0, context: $1) }
      )

    case "ExecuteMutation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest
        >(),
        responseSerializer: ProtobufSerializer<
          Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse
        >(),
        interceptors: interceptors?.makeExecuteMutationInterceptors() ?? [],
        wrapping: { try await self.executeMutation(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerInterceptorFactoryProtocol: Sendable {
  /// - Returns: Interceptors to use when handling 'executeQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteQueryInterceptors() -> [ServerInterceptor<
    Google_Firebase_Dataconnect_V1beta_ExecuteQueryRequest,
    Google_Firebase_Dataconnect_V1beta_ExecuteQueryResponse
  >]

  /// - Returns: Interceptors to use when handling 'executeMutation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteMutationInterceptors() -> [ServerInterceptor<
    Google_Firebase_Dataconnect_V1beta_ExecuteMutationRequest,
    Google_Firebase_Dataconnect_V1beta_ExecuteMutationResponse
  >]
}

public enum Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ConnectorService",
    fullName: "google.firebase.dataconnect.v1beta.ConnectorService",
    methods: [
      Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerMetadata.Methods.executeQuery,
      Google_Firebase_Dataconnect_V1beta_ConnectorServiceServerMetadata.Methods.executeMutation,
    ]
  )

  public enum Methods {
    public static let executeQuery = GRPCMethodDescriptor(
      name: "ExecuteQuery",
      path: "/google.firebase.dataconnect.v1beta.ConnectorService/ExecuteQuery",
      type: GRPCCallType.unary
    )

    public static let executeMutation = GRPCMethodDescriptor(
      name: "ExecuteMutation",
      path: "/google.firebase.dataconnect.v1beta.ConnectorService/ExecuteMutation",
      type: GRPCCallType.unary
    )
  }
}
