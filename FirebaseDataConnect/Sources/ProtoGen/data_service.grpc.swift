//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: data_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Google_Firebase_Dataconnect_V1main_DataServiceClient`, then call methods of this protocol to make API calls.
public protocol Google_Firebase_Dataconnect_V1main_DataServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol? { get }

  func executeQuery(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse>

  func executeMutation(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse>
}

extension Google_Firebase_Dataconnect_V1main_DataServiceClientProtocol {
  public var serviceName: String {
    return "google.firebase.dataconnect.v1main.DataService"
  }

  /// REST API for executing a single pre-defined query.
  /// Use `operationSets/*/revisions/latest` to reference the most recent
  /// revision.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExecuteQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func executeQuery(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse> {
    return self.makeUnaryCall(
      path: Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteQueryInterceptors() ?? []
    )
  }

  /// REST API for executing a single pre-defined mutation.
  /// Use `operationSets/*/revisions/latest` to reference the most recent
  /// revision.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExecuteMutation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func executeMutation(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse> {
    return self.makeUnaryCall(
      path: Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeMutation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteMutationInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Google_Firebase_Dataconnect_V1main_DataServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Google_Firebase_Dataconnect_V1main_DataServiceNIOClient")
public final class Google_Firebase_Dataconnect_V1main_DataServiceClient: Google_Firebase_Dataconnect_V1main_DataServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.firebase.dataconnect.v1main.DataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Google_Firebase_Dataconnect_V1main_DataServiceNIOClient: Google_Firebase_Dataconnect_V1main_DataServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the google.firebase.dataconnect.v1main.DataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firebase_Dataconnect_V1main_DataServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol? { get }

  func makeExecuteQueryCall(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse>

  func makeExecuteMutationCall(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firebase_Dataconnect_V1main_DataServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeExecuteQueryCall(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteQueryInterceptors() ?? []
    )
  }

  public func makeExecuteMutationCall(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeMutation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteMutationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firebase_Dataconnect_V1main_DataServiceAsyncClientProtocol {
  public func executeQuery(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteQueryInterceptors() ?? []
    )
  }

  public func executeMutation(
    _ request: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeMutation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteMutationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Google_Firebase_Dataconnect_V1main_DataServiceAsyncClient: Google_Firebase_Dataconnect_V1main_DataServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Google_Firebase_Dataconnect_V1main_DataServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'executeQuery'.
  func makeExecuteQueryInterceptors() -> [ClientInterceptor<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'executeMutation'.
  func makeExecuteMutationInterceptors() -> [ClientInterceptor<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse>]
}

public enum Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DataService",
    fullName: "google.firebase.dataconnect.v1main.DataService",
    methods: [
      Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeQuery,
      Google_Firebase_Dataconnect_V1main_DataServiceClientMetadata.Methods.executeMutation,
    ]
  )

  public enum Methods {
    public static let executeQuery = GRPCMethodDescriptor(
      name: "ExecuteQuery",
      path: "/google.firebase.dataconnect.v1main.DataService/ExecuteQuery",
      type: GRPCCallType.unary
    )

    public static let executeMutation = GRPCMethodDescriptor(
      name: "ExecuteMutation",
      path: "/google.firebase.dataconnect.v1main.DataService/ExecuteMutation",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Firebase_Dataconnect_V1main_DataServiceProvider: CallHandlerProvider {
  var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceServerInterceptorFactoryProtocol? { get }

  /// REST API for executing a single pre-defined query.
  /// Use `operationSets/*/revisions/latest` to reference the most recent
  /// revision.
  func executeQuery(request: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse>

  /// REST API for executing a single pre-defined mutation.
  /// Use `operationSets/*/revisions/latest` to reference the most recent
  /// revision.
  func executeMutation(request: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse>
}

extension Google_Firebase_Dataconnect_V1main_DataServiceProvider {
  public var serviceName: Substring {
    return Google_Firebase_Dataconnect_V1main_DataServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ExecuteQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse>(),
        interceptors: self.interceptors?.makeExecuteQueryInterceptors() ?? [],
        userFunction: self.executeQuery(request:context:)
      )

    case "ExecuteMutation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse>(),
        interceptors: self.interceptors?.makeExecuteMutationInterceptors() ?? [],
        userFunction: self.executeMutation(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firebase_Dataconnect_V1main_DataServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceServerInterceptorFactoryProtocol? { get }

  /// REST API for executing a single pre-defined query.
  /// Use `operationSets/*/revisions/latest` to reference the most recent
  /// revision.
  @Sendable func executeQuery(
    request: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse

  /// REST API for executing a single pre-defined mutation.
  /// Use `operationSets/*/revisions/latest` to reference the most recent
  /// revision.
  @Sendable func executeMutation(
    request: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firebase_Dataconnect_V1main_DataServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firebase_Dataconnect_V1main_DataServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Google_Firebase_Dataconnect_V1main_DataServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Google_Firebase_Dataconnect_V1main_DataServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ExecuteQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse>(),
        interceptors: self.interceptors?.makeExecuteQueryInterceptors() ?? [],
        wrapping: self.executeQuery(request:context:)
      )

    case "ExecuteMutation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse>(),
        interceptors: self.interceptors?.makeExecuteMutationInterceptors() ?? [],
        wrapping: self.executeMutation(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Google_Firebase_Dataconnect_V1main_DataServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'executeQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteQueryInterceptors() -> [ServerInterceptor<Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse>]

  /// - Returns: Interceptors to use when handling 'executeMutation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteMutationInterceptors() -> [ServerInterceptor<Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse>]
}

public enum Google_Firebase_Dataconnect_V1main_DataServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DataService",
    fullName: "google.firebase.dataconnect.v1main.DataService",
    methods: [
      Google_Firebase_Dataconnect_V1main_DataServiceServerMetadata.Methods.executeQuery,
      Google_Firebase_Dataconnect_V1main_DataServiceServerMetadata.Methods.executeMutation,
    ]
  )

  public enum Methods {
    public static let executeQuery = GRPCMethodDescriptor(
      name: "ExecuteQuery",
      path: "/google.firebase.dataconnect.v1main.DataService/ExecuteQuery",
      type: GRPCCallType.unary
    )

    public static let executeMutation = GRPCMethodDescriptor(
      name: "ExecuteMutation",
      path: "/google.firebase.dataconnect.v1main.DataService/ExecuteMutation",
      type: GRPCCallType.unary
    )
  }
}
