// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: data_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Adapted from http://google3/firebase/firemat/emulator/server/api/data_service.proto;rcl=586381894

// API protos for the Firebase Data Connect Private API DataService.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the operation set revision that contains the query to
  /// execute, in the format:
  /// ```
  /// projects/{project}/locations/{location}/services/{service}/operationSets/{operation_set}/revisions/{revision}
  /// ```
  /// This is left empty when it is within StreamRequest.
  public var name: String = String()

  /// The name of the GraphQL operation. See
  /// https://graphql.org/learn/queries/#operation-name for more context.
  public var operationName: String = String()

  /// Arbitrary JSON parameters (GraphQL variables) for the operation.
  public var variables: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _variables ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_variables = newValue}
  }
  /// Returns true if `variables` has been explicitly set.
  public var hasVariables: Bool {return self._variables != nil}
  /// Clears the value of `variables`. Subsequent reads from it will return its default value.
  public mutating func clearVariables() {self._variables = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _variables: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the operation set revision that contains the mutation
  /// to execute, in the format:
  /// ```
  /// projects/{project}/locations/{location}/services/{service}/operationSets/{operation_set}/revisions/{revision}
  /// ```
  /// This is left empty when it is within StreamRequest.
  public var name: String = String()

  /// The name of the GraphQL operation. See
  /// https://graphql.org/learn/queries/#operation-name for more context.
  public var operationName: String = String()

  /// Arbitrary JSON parameters (GraphQL variables) for the operation.
  public var variables: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _variables ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_variables = newValue}
  }
  /// Returns true if `variables` has been explicitly set.
  public var hasVariables: Bool {return self._variables != nil}
  /// Clears the value of `variables`. Subsequent reads from it will return its default value.
  public mutating func clearVariables() {self._variables = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _variables: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var errors: [Google_Firebase_Dataconnect_V1main_GraphqlError] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var errors: [Google_Firebase_Dataconnect_V1main_GraphqlError] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Google_Firebase_Dataconnect_V1main_GraphqlError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Description of the error, intended for the developer.
  public var message: String = String()

  /// The location in the query where the error occurred.
  public var locations: [Google_Firebase_Dataconnect_V1main_SourceLocation] = []

  /// The result field which could not be populated due to error.
  public var path: SwiftProtobuf.Google_Protobuf_ListValue {
    get {return _path ?? SwiftProtobuf.Google_Protobuf_ListValue()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  /// Additional error information in error extensions.
  public var extensions: Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions {
    get {return _extensions ?? Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions()}
    set {_extensions = newValue}
  }
  /// Returns true if `extensions` has been explicitly set.
  public var hasExtensions: Bool {return self._extensions != nil}
  /// Clears the value of `extensions`. Subsequent reads from it will return its default value.
  public mutating func clearExtensions() {self._extensions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _path: SwiftProtobuf.Google_Protobuf_ListValue? = nil
  fileprivate var _extensions: Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions? = nil
}

public struct Google_Firebase_Dataconnect_V1main_SourceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var line: Int32 = 0

  public var column: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// An error that occurred while executing a GraphQL query.
public struct Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var file: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest: @unchecked Sendable {}
extension Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest: @unchecked Sendable {}
extension Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse: @unchecked Sendable {}
extension Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse: @unchecked Sendable {}
extension Google_Firebase_Dataconnect_V1main_GraphqlError: @unchecked Sendable {}
extension Google_Firebase_Dataconnect_V1main_SourceLocation: @unchecked Sendable {}
extension Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.firebase.dataconnect.v1main"

extension Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteQueryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "operation_name"),
    3: .same(proto: "variables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.operationName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._variables) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.operationName.isEmpty {
      try visitor.visitSingularStringField(value: self.operationName, fieldNumber: 2)
    }
    try { if let v = self._variables {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest, rhs: Google_Firebase_Dataconnect_V1main_ExecuteQueryRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.operationName != rhs.operationName {return false}
    if lhs._variables != rhs._variables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteMutationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "operation_name"),
    3: .same(proto: "variables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.operationName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._variables) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.operationName.isEmpty {
      try visitor.visitSingularStringField(value: self.operationName, fieldNumber: 2)
    }
    try { if let v = self._variables {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest, rhs: Google_Firebase_Dataconnect_V1main_ExecuteMutationRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.operationName != rhs.operationName {return false}
    if lhs._variables != rhs._variables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteQueryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.errors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.errors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errors, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse, rhs: Google_Firebase_Dataconnect_V1main_ExecuteQueryResponse) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.errors != rhs.errors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteMutationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.errors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.errors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errors, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse, rhs: Google_Firebase_Dataconnect_V1main_ExecuteMutationResponse) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.errors != rhs.errors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firebase_Dataconnect_V1main_GraphqlError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GraphqlError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "locations"),
    3: .same(proto: "path"),
    6: .same(proto: "extensions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.locations) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._path) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._extensions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if !self.locations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 2)
    }
    try { if let v = self._path {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._extensions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firebase_Dataconnect_V1main_GraphqlError, rhs: Google_Firebase_Dataconnect_V1main_GraphqlError) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.locations != rhs.locations {return false}
    if lhs._path != rhs._path {return false}
    if lhs._extensions != rhs._extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firebase_Dataconnect_V1main_SourceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "line"),
    2: .same(proto: "column"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.line) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.column) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.line != 0 {
      try visitor.visitSingularInt32Field(value: self.line, fieldNumber: 1)
    }
    if self.column != 0 {
      try visitor.visitSingularInt32Field(value: self.column, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firebase_Dataconnect_V1main_SourceLocation, rhs: Google_Firebase_Dataconnect_V1main_SourceLocation) -> Bool {
    if lhs.line != rhs.line {return false}
    if lhs.column != rhs.column {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GraphqlErrorExtensions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "file"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.file) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.file.isEmpty {
      try visitor.visitSingularStringField(value: self.file, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions, rhs: Google_Firebase_Dataconnect_V1main_GraphqlErrorExtensions) -> Bool {
    if lhs.file != rhs.file {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
